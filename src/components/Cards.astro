---
import Card from "../components/Card.astro";

const currentDate = new Date();
const month = currentDate.getMonth() + 1; 
const year = currentDate.getFullYear();


function getDaysInMonth(month, year) {
  // Create a new date object for the given month and year
  const date = new Date(year, month - 1, 1);

  // Get the next month's first day
  const nextMonth = new Date(year, month, 1);

  // Subtract 1 day from the next month's first day
  const lastDayOfMonth = new Date(nextMonth.getTime() - 1);

  // Extract the day from the last day of the given month
  const daysInMonth = lastDayOfMonth.getDate();

  return daysInMonth;
}

const daysInMonth = getDaysInMonth(month, year);


const url = `https://yskliqqpdzsegbvxarsv.supabase.co/rest/v1/events?select=*&&date=gt.${year}-${month}-01&date=lt.${year}-${month}-${daysInMonth}`;
const api = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlza2xpcXFwZHpzZWdidnhhcnN2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODQxMzk2MjQsImV4cCI6MTk5OTcxNTYyNH0.iKKqWn6lmjZ-iZtDQz4yQf1uzevLT0nACyS9LlHt5x8";
const options = {
  method: "GET",
  headers: {
    apikey: api,
  },
};

const data = await fetch(url, options).then((res) => res.json());
data.sort((a, b) =>  Date.parse(a.date) - Date.parse(b.date));

function getFirstLetters(sentence) {
  return sentence.substring(0, 50);
}

---

<!-- <div class="cards_container">
    <Card />
    <Card />
    <Card />
</div> -->

<div class="headline-container">
    
  </div>
<div class="wrapper">
     <img id="left" class="arrow left" src="img/black_arrow_left.svg" alt=""> 
    <div class="carousel">
         {
            data.map((event) => {
                return <div class="square"> <Card headline={event.headline} eventDate={event.date} content={ getFirstLetters(event.description)+"..."} cardImage={event.image} link={"begivenhed/"+event.id} /> </div>
            })
        } 
 
    </div>
     <img  class="arrow right" src="img/black_arrow_right.svg" alt="">
</div>


<script>
   function carouselFun(){
    const carousel = document.querySelector(".carousel");
    const arrowicons = document.querySelectorAll(".arrow");
    const firstSquare = carousel.querySelectorAll(".square")[0];

    let isDragStart = false, isDraggin = false, prevPageX, prevScrollLeft, postitionDiff;
    let firstSquareWith = firstSquare.clientWidth;

    arrowicons.forEach(icon => {
        icon.addEventListener("click", () => {
            
            carousel.scrollLeft += icon.id == "left" ? -firstSquareWith : firstSquareWith;
        })
    })

    const autoSlide = () => {
        if (carousel.scrollLeft == (carousel.scrollWidth - carousel.clientWidth )) return;

        postitionDiff = Math.abs(postitionDiff);
        //let firstSquareWith = firstSquare.clientWidth +4;
        let valDifference = firstSquareWith - postitionDiff

        if(carousel.scrollLeft > prevScrollLeft){
            return carousel.scrollLeft += postitionDiff > firstSquareWith / 3 ? valDifference : -postitionDiff;
        }else{
            return carousel.scrollLeft -= postitionDiff > firstSquareWith / 3 ? valDifference : -postitionDiff;
        }
        
    }

    const dragStart = (e) =>{
        isDragStart = true;
        prevPageX = e.pageX || e.touches[0].pageX;
        prevScrollLeft = carousel.scrollLeft;
    }
    
    const dragging = (e) => {
        if(!isDragStart) return;
        e.preventDefault();
        // carousel.scrollLeft = e.pageX;
        isDraggin = true;

        postitionDiff = (e.pageX || e.touches[0].pageX) - prevPageX;
        carousel.scrollLeft = prevScrollLeft - postitionDiff;

        carousel.classList.add("dragging");
        
    }

    const dragStop = () => {
         isDragStart = false;
         carousel.classList.remove("dragging");
         if(!isDraggin) return;
         isDraggin = false;
         autoSlide();

    }


    carousel.addEventListener("mousedown", dragStart);
    carousel.addEventListener("touchstart", dragStart);


    carousel.addEventListener("mousemove", dragging);
    carousel.addEventListener("touchmove", dragging);


    carousel.addEventListener("mouseup", dragStop);
    carousel.addEventListener("mouseleave", dragStop);
    carousel.addEventListener("touchend", dragStop);


   }

   carouselFun();

   window.onresize = carouselFun;
   
</script>


<style>

    .arrow{
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
    }
    .right{
        right: 0px;
    }
    .left{
        left: 0px;
    }
    @media (min-width:700px){
        .right{
        right: -20px;
    }
    .left{
        left: -20px;
    }
}
@media (min-width:1000px){
    .right{
        right: -40px;
    }
    .left{
        left: -40px;
    }
}

    
    .wrapper{
        max-width: 960px;
        position: relative;
        margin-inline: auto;
    }
    
    .wrapper .carousel{
        overflow: hidden;
         white-space: nowrap; 
        scroll-behavior: smooth;
    }
    
    .carousel.dragging{
        scroll-behavior: auto;
    }
    
    .button-container{
        text-align: center;
        margin-bottom: 40px;
    }
    
    .square{
         display: inline-block; 
        width: 350px;
        width: calc(100%/3); 
        /* height: 350px; */
        /* margin-inline: 4px; */
        text-align: center;
        padding: 0;
    }
    @media (max-width:1000px){
    .square{
      width: calc(100%/2); 
    
  }
}

@media (max-width:700px){
    .square{
      width: calc(100%/1); 
    
  }
}
    
    .blue{
        background-color: blue;
    }
    .red{
        background-color: red;
    }
    .yellow{
        background-color: yellow;
    }
    .green{
        background-color: green
    }
    
    .orange{
        background-color: orange;
    }
    .grey{
        background-color: grey;
    }
    
    </style>